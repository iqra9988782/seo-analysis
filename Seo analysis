import streamlit as st
import requests
from bs4 import BeautifulSoup

def fetch_website_data(url):
    """Fetch the website HTML content."""
    try:
        response = requests.get(url)
        if response.status_code == 200:
            return response.text
        else:
            st.error(f"Failed to retrieve data from {url}. HTTP Status Code: {response.status_code}")
            return None
    except requests.exceptions.RequestException as e:
        st.error(f"Error fetching the URL: {e}")
        return None

def analyze_seo(html_content):
    """Analyze SEO elements like title, meta description, and headings."""
    soup = BeautifulSoup(html_content, 'html.parser')
    
    # Get the title of the webpage
    title = soup.title.string if soup.title else "No title found"

    # Get the meta description
    meta_description = None
    meta_tag = soup.find('meta', attrs={'name': 'description'})
    if meta_tag:
        meta_description = meta_tag.get('content')
    else:
        meta_description = "No meta description found"
    
    # Get all headings (h1, h2, h3, etc.)
    headings = {
        "h1": [h1.get_text() for h1 in soup.find_all('h1')],
        "h2": [h2.get_text() for h2 in soup.find_all('h2')],
        "h3": [h3.get_text() for h3 in soup.find_all('h3')],
    }

    return title, meta_description, headings

def display_results(title, meta_description, headings):
    """Display the results in the Streamlit app."""
    st.header("SEO Analysis Results")
    st.subheader("Page Title:")
    st.write(title)
    
    st.subheader("Meta Description:")
    st.write(meta_description)
    
    st.subheader("Headings:")
    for h, texts in headings.items():
        st.write(f"{h.upper()} tags:")
        if texts:
            for text in texts:
                st.write(f"- {text}")
        else:
            st.write(f"No {h} tags found.")

# Streamlit app UI
st.title("SEO Analyzer Tool")
url_input = st.text_input("Enter the URL of the website to analyze:")

if url_input:
    # Fetch and analyze website data
    html_content = fetch_website_data(url_input)
    if html_content:
        title, meta_description, headings = analyze_seo(html_content)
        display_results(title, meta_description, headings)
